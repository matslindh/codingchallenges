def mark(visited, x, y):
    if y not in visited:
        visited[y] = {}

    if x not in visited[y]:
        visited[y][x] = True

def mazer(s):
    x = 0
    y = 0

    visited = {0: {0: True}}

    max_x = 0
    min_x = 0
    max_y = 0
    min_y = 0

    for i in range(0, len(s), 2):
        print(x, y)
        dist, direction = s[i:i+2]
        dist = int(dist)

        for j in range(0, dist):
            if direction == 'H':
                x += 1
            elif direction == 'V':
                x -= 1
            elif direction == 'F':
                y += 1
            elif direction == 'B':
                y -= 1

            mark(visited, x, y)

        max_x = max(max_x, x)
        min_x = min(min_x, x)
        max_y = max(max_y, y)
        min_y = min(min_y, y)

    seen = 0
    not_seen = 0

    for y in range(min_y, max_y + 1):
        for x in range(min_x, max_x + 1):
            if y in visited and x in visited[y]:
                seen += 1
            else:
                not_seen += 1

    return max_x, min_x, max_y, min_y, seen, not_seen, seen / not_seen


def test_mazer():
    assert mazer('2H2F2H1B3V') == (4, 0, 2, 0, 10, 5, 2)


if __name__ == '__main__':
    print(mazer('5F6V8V3H6V8B3B6H1F5F9F6V5H2B2V6H5F7F8B3B7H3F2V9B6V6F8B2B7V6F6B2B7B7F9V8B5F9B5B4B6F6F2B5B4B2H6F6H6F2F4H2F4B7V2F3H4H7V4V4V4V4H3F9V3V4F3H3F8H5F3B4H3F8V9H5F5V7H8H4F9V5V9V8B9H8V8H3B3B9H7V3B3H2B4H9B2F2V7H9H6F9V4H7H2H8F2V3B2B7F6H7H3B2B7B3F2V7B8F4V6F8V1V2F2F9H6B9V3F9V3H5B2V2B2B7B3B5H9B4F8V6F6B3H4B2V3B3H6F4H9H5F6H7H4B3B4F5V4V5H8V4H5B9B3B5F8V5F5V8H5B6F7F9H4B5F8F4B3B8V8B8F6H7B6V8H4B3V7F4B3H3F6V3V1B3V3H3V4H2F8V7B4H5H8B9F2B3V3B6B6V7B8H2H4H4V3V2F4H3H4B6F6V4B2B4F7V9B7H6H2F4H7B4B2V8B8F4F7V2V2B2B5H8B5H9B3B7F3F5B6V2F4V6F4V3B3V2F8F6V2H3H7B4B8B5H5F7H3F8F8V8F8B6B5V7B4V8B3V8F8H5H3B3H6F5H2V5V6H2B4F8F6H6F2H6F3F5V4B2V3F3H3B7F3B2H8H6F2H3B3H5H5F6H4V6B4H6V2V3F8H8F6V3F3F1H7F5H4H1H8B3V8V9F8V8H9B6V2F7V9F2F2B3B6F5F9H6F5H2B4B5V8B2B8B3F5B3F4B8V8B2H3B2V8F7H6H2H3V6B2H5H5B3V7V9F8H1V8V5B6B5B8V8V2V4V9V2V5V5V7F3F1B9F2B2B3V7B8F4V2B2V5B7B7V5H7F7F2F4B3F7F9F5V9H8B3H3V7H5V5F4B4H5F7V4V4V4B8B8H7F4H7V7V9V5B6H3H3F9F3V2H9H2V9B5F9H6V8B6H6B4H6F7H5F5F8V3F2H4B4H6B4B7H2H8F5B5V7B3V8F3V2F9F9B4H6F8V7H6B2F5F4F2B9H4V1F7B5B3F9B7V8V4F3F3V9H3V6F4H6V4B8V8F2V4H2V5F3F8H6V7F9B2V6F5F9H3V3V3F2B2H7V9V3V5F5H2F2H7B2V4F7H7V6H3B7F4F2F5V3V8H6V5V9H6H2H4H8B9B6F4H8H6H6H6B3F4V6B9F7V3F8V5F2F7V6H6F2V4F1B2B8V2V2H5V4H5F2B8V7H4B5H7B5B2F2V2F6V6F8H2V5F4V2V8B4H4B7V3B6B6F8H8F4B9H9B8B9H5H3H6H2B4B2B9F8H4B3B6B9V6H2F9F9V6B6B3B5V6B7V8F6F4B6V8B8H7V9H3F7H7H2F3B3B1F5F3F7F3H8V1H8H6V2H6B6H5F5B6H2F8B9H7H8H3V9V5F2B9F9B4F6H3B4F3B2B9B4H8V9V8V7H8B5F8F2F9B3H7B8B8H6B3B8B5F7V9F2B8H5B9F8B9H7V5B4B1F6B4H5F8V3V6F6F8V7B6B2F5B9F9H8F7F6V6H5H7V7V8B9B5F9F3V8B4H7B3B9H5V7V8V9B8F2F4F7V5H9B3V9B4B6F4H4V5V6B6F3V5B9V5H3V2H3H8B5H8V7V9V4B6B3B5B2V7H2B5V2V3F4V9H8H6B2F9V8B5F9F1V4H8F4F9H4F9B5B8F9H9B7H8F9F8B8H2B2F3B2V2B8V9V4B3B8H9B5H3V9V8V5F5B9F9B4V7V7F2F9H4B5F3F6H3B2H4F8V4F2F5V3H4B7F9H8F9V5H5F6F2V6V9B9H5B3V5F4F9F8F2H2H8B8F2V4B8H6V2B6H4V3V3B2H9H6B1H2B4F9B3F2H5F5F4H1H7H4V7H4F8B9F3V5V6B2F2B3H6B8F4F4B6V3B4F2B2B7V8B8H5H4B8F6H3H5F2H6B4H6B6F5V3V6H2F4F3B9B7V8H9H2V7V5F8F9H2V9V4F8H5V6V9F7F7H3V2B2V4F3B4F5F5F4H4V2F8H8F8B8H8H8B8V8B4F8H4H2H2B7V5B3H6B4H2H5F2F8H6V4V8B9B1V3F8H4V3F6B2F2V7V4V9F3H2H9F6F6F7F5H8V'))